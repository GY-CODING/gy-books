<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="523" failures="0" errors="0" time="18.842">
  <testsuite name="BookRating" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="1.814" tests="17">
    <testcase classname="BookRating renders without crashing" name="BookRating renders without crashing" time="0.122">
    </testcase>
    <testcase classname="BookRating renders with default &quot;Want to read&quot; label when no book saved" name="BookRating renders with default &quot;Want to read&quot; label when no book saved" time="0.002">
    </testcase>
    <testcase classname="BookRating renders with correct status label when book is saved" name="BookRating renders with correct status label when book is saved" time="0.002">
    </testcase>
    <testcase classname="BookRating shows &quot;Sign in to rate this book&quot; when user is not logged in" name="BookRating shows &quot;Sign in to rate this book&quot; when user is not logged in" time="0.001">
    </testcase>
    <testcase classname="BookRating disables button when not logged in" name="BookRating disables button when not logged in" time="0.005">
    </testcase>
    <testcase classname="BookRating opens menu on desktop when button is clicked" name="BookRating opens menu on desktop when button is clicked" time="0.007">
    </testcase>
    <testcase classname="BookRating opens drawer on mobile when button is clicked" name="BookRating opens drawer on mobile when button is clicked" time="0.004">
    </testcase>
    <testcase classname="BookRating calls handleDeleteBook when book is saved and delete is triggered" name="BookRating calls handleDeleteBook when book is saved and delete is triggered" time="0.002">
    </testcase>
    <testcase classname="BookRating handles loading state correctly" name="BookRating handles loading state correctly" time="0.001">
    </testcase>
    <testcase classname="BookRating handles submitting state correctly" name="BookRating handles submitting state correctly" time="0.004">
    </testcase>
    <testcase classname="BookRating passes correct props to BookRatingMenu" name="BookRating passes correct props to BookRatingMenu" time="0.001">
    </testcase>
    <testcase classname="BookRating passes correct props to BookRatingDrawer" name="BookRating passes correct props to BookRatingDrawer" time="0.001">
    </testcase>
    <testcase classname="BookRating handles book with RATE status correctly" name="BookRating handles book with RATE status correctly" time="0.003">
    </testcase>
    <testcase classname="BookRating renders reading status correctly" name="BookRating renders reading status correctly" time="0.001">
    </testcase>
    <testcase classname="BookRating renders want to read status correctly" name="BookRating renders want to read status correctly" time="0.001">
    </testcase>
    <testcase classname="BookRating handles localHandleDeleteBook function" name="BookRating handles localHandleDeleteBook function" time="0.003">
    </testcase>
    <testcase classname="BookRating handles case when displayStatusOption is not found" name="BookRating handles case when displayStatusOption is not found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ProfileHeaderSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:02" time="1.645" tests="20">
    <testcase classname="ProfileHeaderSkeleton Basic rendering should render without crashing" name="ProfileHeaderSkeleton Basic rendering should render without crashing" time="0.02">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Basic rendering should render all basic skeleton elements" name="ProfileHeaderSkeleton Basic rendering should render all basic skeleton elements" time="0.007">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton canEdit prop behavior should show edit buttons when canEdit is true (default)" name="ProfileHeaderSkeleton canEdit prop behavior should show edit buttons when canEdit is true (default)" time="0.006">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton canEdit prop behavior should show edit buttons when canEdit is explicitly true" name="ProfileHeaderSkeleton canEdit prop behavior should show edit buttons when canEdit is explicitly true" time="0.003">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton canEdit prop behavior should hide edit buttons when canEdit is false" name="ProfileHeaderSkeleton canEdit prop behavior should hide edit buttons when canEdit is false" time="0.002">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton canEdit prop behavior should show friends count when canEdit is true" name="ProfileHeaderSkeleton canEdit prop behavior should show friends count when canEdit is true" time="0.007">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton canEdit prop behavior should hide friends count when canEdit is false" name="ProfileHeaderSkeleton canEdit prop behavior should hide friends count when canEdit is false" time="0.004">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Skeleton types and structure should render circular skeleton for avatar" name="ProfileHeaderSkeleton Skeleton types and structure should render circular skeleton for avatar" time="0.003">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Skeleton types and structure should render text skeletons for username and email" name="ProfileHeaderSkeleton Skeleton types and structure should render text skeletons for username and email" time="0.004">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Skeleton types and structure should render rectangular skeleton for biography" name="ProfileHeaderSkeleton Skeleton types and structure should render rectangular skeleton for biography" time="0.003">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Responsive behavior should have responsive container structure" name="ProfileHeaderSkeleton Responsive behavior should have responsive container structure" time="0.006">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Responsive behavior should have proper gap spacing" name="ProfileHeaderSkeleton Responsive behavior should have proper gap spacing" time="0.004">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Avatar skeleton should have correct dimensions for avatar skeleton" name="ProfileHeaderSkeleton Avatar skeleton should have correct dimensions for avatar skeleton" time="0.002">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Content area should render content area with proper structure" name="ProfileHeaderSkeleton Content area should render content area with proper structure" time="0.003">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Edit buttons area should render edit buttons area when canEdit is true" name="ProfileHeaderSkeleton Edit buttons area should render edit buttons area when canEdit is true" time="0.001">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Edit buttons area should not render edit buttons area when canEdit is false" name="ProfileHeaderSkeleton Edit buttons area should not render edit buttons area when canEdit is false" time="0.003">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Props handling should handle undefined canEdit prop (default behavior)" name="ProfileHeaderSkeleton Props handling should handle undefined canEdit prop (default behavior)" time="0.003">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Props handling should handle boolean canEdit prop" name="ProfileHeaderSkeleton Props handling should handle boolean canEdit prop" time="0.01">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Accessibility should have proper structure for screen readers" name="ProfileHeaderSkeleton Accessibility should have proper structure for screen readers" time="0.002">
    </testcase>
    <testcase classname="ProfileHeaderSkeleton Accessibility should render skeleton elements with proper classes" name="ProfileHeaderSkeleton Accessibility should render skeleton elements with proper classes" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UserImage" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="3.565" tests="4">
    <testcase classname="UserImage renders the user image with correct src and alt" name="UserImage renders the user image with correct src and alt" time="0.065">
    </testcase>
    <testcase classname="UserImage applies correct width and height" name="UserImage applies correct width and height" time="0.008">
    </testcase>
    <testcase classname="UserImage applies style props for avatar" name="UserImage applies style props for avatar" time="0.035">
    </testcase>
    <testcase classname="UserImage renders empty src and alt if user is missing" name="UserImage renders empty src and alt if user is missing" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BiographySection" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="3.603" tests="7">
    <testcase classname="BiographySection renders biography in view mode" name="BiographySection renders biography in view mode" time="0.05">
    </testcase>
    <testcase classname="BiographySection renders default text if biography is empty" name="BiographySection renders default text if biography is empty" time="0.005">
    </testcase>
    <testcase classname="BiographySection renders text field and buttons in edit mode" name="BiographySection renders text field and buttons in edit mode" time="0.024">
    </testcase>
    <testcase classname="BiographySection calls onChange when biography is edited" name="BiographySection calls onChange when biography is edited" time="0.019">
    </testcase>
    <testcase classname="BiographySection calls onSave when Save button is clicked" name="BiographySection calls onSave when Save button is clicked" time="0.024">
    </testcase>
    <testcase classname="BiographySection calls onCancel when Cancel button is clicked" name="BiographySection calls onCancel when Cancel button is clicked" time="0.005">
    </testcase>
    <testcase classname="BiographySection disables Save button when isLoading is true" name="BiographySection disables Save button when isLoading is true" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="AnimatedAlert" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="3.645" tests="7">
    <testcase classname="AnimatedAlert renders the alert when open is true" name="AnimatedAlert renders the alert when open is true" time="0.059">
    </testcase>
    <testcase classname="AnimatedAlert does not render the alert when open is false" name="AnimatedAlert does not render the alert when open is false" time="0.003">
    </testcase>
    <testcase classname="AnimatedAlert calls onClose after duration" name="AnimatedAlert calls onClose after duration" time="0.007">
    </testcase>
    <testcase classname="AnimatedAlert renders with default severity if not provided" name="AnimatedAlert renders with default severity if not provided" time="0.003">
    </testcase>
    <testcase classname="AnimatedAlert renders AlertTitle when title is provided" name="AnimatedAlert renders AlertTitle when title is provided" time="0.005">
    </testcase>
    <testcase classname="AnimatedAlert does not render AlertTitle when title is not provided" name="AnimatedAlert does not render AlertTitle when title is not provided" time="0.004">
    </testcase>
    <testcase classname="AnimatedAlert does not render AlertTitle when title is an empty string" name="AnimatedAlert does not render AlertTitle when title is an empty string" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ProfileHeader" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="3.673" tests="7">
    <testcase classname="ProfileHeader renders username and email" name="ProfileHeader renders username and email" time="0.084">
    </testcase>
    <testcase classname="ProfileHeader renders friends count and label" name="ProfileHeader renders friends count and label" time="0.026">
    </testcase>
    <testcase classname="ProfileHeader shows loading state for friends" name="ProfileHeader shows loading state for friends" time="0.008">
    </testcase>
    <testcase classname="ProfileHeader renders biography section" name="ProfileHeader renders biography section" time="0.015">
    </testcase>
    <testcase classname="ProfileHeader calls onEditProfile when Edit Profile button is clicked" name="ProfileHeader calls onEditProfile when Edit Profile button is clicked" time="0.016">
    </testcase>
    <testcase classname="ProfileHeader renders Edit Account button with correct link" name="ProfileHeader renders Edit Account button with correct link" time="0.016">
    </testcase>
    <testcase classname="ProfileHeader renders UserImage component" name="ProfileHeader renders UserImage component" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="BookRatingStatusButtons" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:04" time="0.343" tests="19">
    <testcase classname="BookRatingStatusButtons renders without crashing" name="BookRatingStatusButtons renders without crashing" time="0.043">
    </testcase>
    <testcase classname="BookRatingStatusButtons renders all status buttons" name="BookRatingStatusButtons renders all status buttons" time="0.015">
    </testcase>
    <testcase classname="BookRatingStatusButtons highlights the current status as contained" name="BookRatingStatusButtons highlights the current status as contained" time="0.004">
    </testcase>
    <testcase classname="BookRatingStatusButtons shows other buttons as outlined" name="BookRatingStatusButtons shows other buttons as outlined" time="0.002">
    </testcase>
    <testcase classname="BookRatingStatusButtons calls setTempStatus when a button is clicked" name="BookRatingStatusButtons calls setTempStatus when a button is clicked" time="0.008">
    </testcase>
    <testcase classname="BookRatingStatusButtons calls setTempStatus with correct status for each button" name="BookRatingStatusButtons calls setTempStatus with correct status for each button" time="0.005">
    </testcase>
    <testcase classname="BookRatingStatusButtons renders with READING status selected" name="BookRatingStatusButtons renders with READING status selected" time="0.004">
    </testcase>
    <testcase classname="BookRatingStatusButtons renders with READ status selected" name="BookRatingStatusButtons renders with READ status selected" time="0.005">
    </testcase>
    <testcase classname="BookRatingStatusButtons applies custom font family" name="BookRatingStatusButtons applies custom font family" time="0.008">
    </testcase>
    <testcase classname="BookRatingStatusButtons renders icons for each button" name="BookRatingStatusButtons renders icons for each button" time="0.002">
    </testcase>
    <testcase classname="BookRatingStatusButtons handles multiple clicks on the same button" name="BookRatingStatusButtons handles multiple clicks on the same button" time="0.004">
    </testcase>
    <testcase classname="BookRatingStatusButtons handles rapid clicking between buttons" name="BookRatingStatusButtons handles rapid clicking between buttons" time="0.002">
    </testcase>
    <testcase classname="BookRatingStatusButtons renders buttons in correct order" name="BookRatingStatusButtons renders buttons in correct order" time="0.005">
    </testcase>
    <testcase classname="BookRatingStatusButtons handles unknown status gracefully" name="BookRatingStatusButtons handles unknown status gracefully" time="0.008">
    </testcase>
    <testcase classname="BookRatingStatusButtons maintains button functionality with different font families" name="BookRatingStatusButtons maintains button functionality with different font families" time="0.002">
    </testcase>
    <testcase classname="BookRatingStatusButtons renders with RATE status" name="BookRatingStatusButtons renders with RATE status" time="0.003">
    </testcase>
    <testcase classname="BookRatingStatusButtons ensures all buttons have consistent structure" name="BookRatingStatusButtons ensures all buttons have consistent structure" time="0.005">
    </testcase>
    <testcase classname="BookRatingStatusButtons handles empty fontFamily gracefully" name="BookRatingStatusButtons handles empty fontFamily gracefully" time="0.002">
    </testcase>
    <testcase classname="BookRatingStatusButtons handles very long font family names" name="BookRatingStatusButtons handles very long font family names" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="BookRatingMenu" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:04" time="0.398" tests="29">
    <testcase classname="BookRatingMenu renders when open is true" name="BookRatingMenu renders when open is true" time="0.07">
    </testcase>
    <testcase classname="BookRatingMenu does not render when open is false" name="BookRatingMenu does not render when open is false" time="0.001">
    </testcase>
    <testcase classname="BookRatingMenu renders rating section with correct title" name="BookRatingMenu renders rating section with correct title" time="0.005">
    </testcase>
    <testcase classname="BookRatingMenu renders status section with correct title" name="BookRatingMenu renders status section with correct title" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu renders progress input" name="BookRatingMenu renders progress input" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu renders dates section with inputs" name="BookRatingMenu renders dates section with inputs" time="0.003">
    </testcase>
    <testcase classname="BookRatingMenu renders apply button" name="BookRatingMenu renders apply button" time="0.001">
    </testcase>
    <testcase classname="BookRatingMenu renders delete button when book is saved and handler is provided" name="BookRatingMenu renders delete button when book is saved and handler is provided" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu does not render delete button when book is not saved" name="BookRatingMenu does not render delete button when book is not saved" time="0.005">
    </testcase>
    <testcase classname="BookRatingMenu does not render delete button when no handler provided" name="BookRatingMenu does not render delete button when no handler provided" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu calls handleDeleteBook when delete button is clicked" name="BookRatingMenu calls handleDeleteBook when delete button is clicked" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu calls handleApply when apply button is clicked" name="BookRatingMenu calls handleApply when apply button is clicked" time="0.003">
    </testcase>
    <testcase classname="BookRatingMenu disables apply button when isSubmitting is true" name="BookRatingMenu disables apply button when isSubmitting is true" time="0.003">
    </testcase>
    <testcase classname="BookRatingMenu passes correct props to RatingStars" name="BookRatingMenu passes correct props to RatingStars" time="0.001">
    </testcase>
    <testcase classname="BookRatingMenu passes loading state to RatingStars" name="BookRatingMenu passes loading state to RatingStars" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu handles date input changes" name="BookRatingMenu handles date input changes" time="0.006">
    </testcase>
    <testcase classname="BookRatingMenu uses default fontFamily when not provided" name="BookRatingMenu uses default fontFamily when not provided" time="0.001">
    </testcase>
    <testcase classname="BookRatingMenu applies custom fontFamily to child components and typography" name="BookRatingMenu applies custom fontFamily to child components and typography" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu handles rating change interaction" name="BookRatingMenu handles rating change interaction" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu handles status change interaction" name="BookRatingMenu handles status change interaction" time="0.006">
    </testcase>
    <testcase classname="BookRatingMenu handles progress change interaction" name="BookRatingMenu handles progress change interaction" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu renders with different state values" name="BookRatingMenu renders with different state values" time="0.003">
    </testcase>
    <testcase classname="BookRatingMenu handles submitting state correctly" name="BookRatingMenu handles submitting state correctly" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu renders with null anchorEl" name="BookRatingMenu renders with null anchorEl" time="0.003">
    </testcase>
    <testcase classname="BookRatingMenu handles empty date values" name="BookRatingMenu handles empty date values" time="0.004">
    </testcase>
    <testcase classname="BookRatingMenu passes correct disabled and loading states" name="BookRatingMenu passes correct disabled and loading states" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu renders with WANT_TO_READ status" name="BookRatingMenu renders with WANT_TO_READ status" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu handles zero rating correctly" name="BookRatingMenu handles zero rating correctly" time="0.002">
    </testcase>
    <testcase classname="BookRatingMenu handles high progress values correctly" name="BookRatingMenu handles high progress values correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BooksFilter" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="4.007" tests="7">
    <testcase classname="BooksFilter renders all filter selects" name="BooksFilter renders all filter selects" time="0.125">
    </testcase>
    <testcase classname="BooksFilter renders status options" name="BooksFilter renders status options" time="0.157">
    </testcase>
    <testcase classname="BooksFilter renders author and series options" name="BooksFilter renders author and series options" time="0.062">
    </testcase>
    <testcase classname="BooksFilter calls onStatusChange when status changes" name="BooksFilter calls onStatusChange when status changes" time="0.038">
    </testcase>
    <testcase classname="BooksFilter calls onAuthorChange when author changes" name="BooksFilter calls onAuthorChange when author changes" time="0.047">
    </testcase>
    <testcase classname="BooksFilter calls onSeriesChange when series changes" name="BooksFilter calls onSeriesChange when series changes" time="0.033">
    </testcase>
    <testcase classname="BooksFilter calls onRatingChange when rating changes" name="BooksFilter calls onRatingChange when rating changes" time="0.084">
    </testcase>
  </testsuite>
  <testsuite name="BookRatingDrawer" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:04" time="0.462" tests="48">
    <testcase classname="BookRatingDrawer renders when open is true" name="BookRatingDrawer renders when open is true" time="0.079">
    </testcase>
    <testcase classname="BookRatingDrawer does not render when open is false" name="BookRatingDrawer does not render when open is false" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer renders close button and calls onClose when clicked" name="BookRatingDrawer renders close button and calls onClose when clicked" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer renders rating section with correct title" name="BookRatingDrawer renders rating section with correct title" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer renders status section with correct title" name="BookRatingDrawer renders status section with correct title" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer renders progress input" name="BookRatingDrawer renders progress input" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer renders date inputs with correct values" name="BookRatingDrawer renders date inputs with correct values" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer renders apply button" name="BookRatingDrawer renders apply button" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer renders delete button when book is saved and handler is provided" name="BookRatingDrawer renders delete button when book is saved and handler is provided" time="0.006">
    </testcase>
    <testcase classname="BookRatingDrawer does not render delete button when book is not saved" name="BookRatingDrawer does not render delete button when book is not saved" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer does not render delete button when no handler provided" name="BookRatingDrawer does not render delete button when no handler provided" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer calls handleDeleteBook when delete button is clicked" name="BookRatingDrawer calls handleDeleteBook when delete button is clicked" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer calls handleApply when apply button is clicked" name="BookRatingDrawer calls handleApply when apply button is clicked" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer disables apply button when isSubmitting is true" name="BookRatingDrawer disables apply button when isSubmitting is true" time="0.005">
    </testcase>
    <testcase classname="BookRatingDrawer passes correct props to RatingStars" name="BookRatingDrawer passes correct props to RatingStars" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer passes loading state to RatingStars" name="BookRatingDrawer passes loading state to RatingStars" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer handles date input changes" name="BookRatingDrawer handles date input changes" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer uses default fontFamily when not provided" name="BookRatingDrawer uses default fontFamily when not provided" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer applies custom fontFamily to child components" name="BookRatingDrawer applies custom fontFamily to child components" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer handles rating change interaction" name="BookRatingDrawer handles rating change interaction" time="0.027">
    </testcase>
    <testcase classname="BookRatingDrawer handles status change interaction" name="BookRatingDrawer handles status change interaction" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer handles progress change interaction" name="BookRatingDrawer handles progress change interaction" time="0.005">
    </testcase>
    <testcase classname="BookRatingDrawer renders with different state values" name="BookRatingDrawer renders with different state values" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer handles submitting state correctly" name="BookRatingDrawer handles submitting state correctly" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer renders when open is true" name="BookRatingDrawer renders when open is true" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer does not render when open is false" name="BookRatingDrawer does not render when open is false" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer renders close button and calls onClose when clicked" name="BookRatingDrawer renders close button and calls onClose when clicked" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer renders rating section with correct title" name="BookRatingDrawer renders rating section with correct title" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer renders status section with correct title" name="BookRatingDrawer renders status section with correct title" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer renders progress input" name="BookRatingDrawer renders progress input" time="0">
    </testcase>
    <testcase classname="BookRatingDrawer renders date inputs with correct values" name="BookRatingDrawer renders date inputs with correct values" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer renders apply button" name="BookRatingDrawer renders apply button" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer renders delete button when book is saved and handler is provided" name="BookRatingDrawer renders delete button when book is saved and handler is provided" time="0.006">
    </testcase>
    <testcase classname="BookRatingDrawer does not render delete button when book is not saved" name="BookRatingDrawer does not render delete button when book is not saved" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer does not render delete button when no handler provided" name="BookRatingDrawer does not render delete button when no handler provided" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer calls handleDeleteBook when delete button is clicked" name="BookRatingDrawer calls handleDeleteBook when delete button is clicked" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer calls handleApply when apply button is clicked" name="BookRatingDrawer calls handleApply when apply button is clicked" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer disables apply button when isSubmitting is true" name="BookRatingDrawer disables apply button when isSubmitting is true" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer passes correct props to RatingStars" name="BookRatingDrawer passes correct props to RatingStars" time="0.001">
    </testcase>
    <testcase classname="BookRatingDrawer passes loading state to RatingStars" name="BookRatingDrawer passes loading state to RatingStars" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer handles date input changes" name="BookRatingDrawer handles date input changes" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer uses default fontFamily when not provided" name="BookRatingDrawer uses default fontFamily when not provided" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer applies custom fontFamily to child components" name="BookRatingDrawer applies custom fontFamily to child components" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer handles rating change interaction" name="BookRatingDrawer handles rating change interaction" time="0.002">
    </testcase>
    <testcase classname="BookRatingDrawer handles status change interaction" name="BookRatingDrawer handles status change interaction" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer handles progress change interaction" name="BookRatingDrawer handles progress change interaction" time="0.004">
    </testcase>
    <testcase classname="BookRatingDrawer renders with different state values" name="BookRatingDrawer renders with different state values" time="0.003">
    </testcase>
    <testcase classname="BookRatingDrawer handles submitting state correctly" name="BookRatingDrawer handles submitting state correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BookCard" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:04" time="0.43" tests="8">
    <testcase classname="BookCard renders without crashing with valid props" name="BookCard renders without crashing with valid props" time="0.013">
    </testcase>
    <testcase classname="BookCard renders without crashing without series" name="BookCard renders without crashing without series" time="0.006">
    </testcase>
    <testcase classname="BookCard renders without crashing without cover image" name="BookCard renders without crashing without cover image" time="0.003">
    </testcase>
    <testcase classname="BookCard renders without crashing without description" name="BookCard renders without crashing without description" time="0.003">
    </testcase>
    <testcase classname="BookCard renders with long title" name="BookCard renders with long title" time="0.002">
    </testcase>
    <testcase classname="BookCard renders with long author name" name="BookCard renders with long author name" time="0.002">
    </testcase>
    <testcase classname="BookCard renders with long description" name="BookCard renders with long description" time="0.006">
    </testcase>
    <testcase classname="BookCard renders with different book data" name="BookCard renders with different book data" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="AuthorCard" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:04" time="0.422" tests="5">
    <testcase classname="AuthorCard renders without crashing with valid props" name="AuthorCard renders without crashing with valid props" time="0.006">
    </testcase>
    <testcase classname="AuthorCard renders with author without image" name="AuthorCard renders with author without image" time="0.007">
    </testcase>
    <testcase classname="AuthorCard renders with empty biography" name="AuthorCard renders with empty biography" time="0.002">
    </testcase>
    <testcase classname="AuthorCard renders with long author name" name="AuthorCard renders with long author name" time="0.002">
    </testcase>
    <testcase classname="AuthorCard renders with different author data" name="AuthorCard renders with different author data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useFriendRequests" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.364" tests="11">
    <testcase classname="useFriendRequests should return all required properties" name="useFriendRequests should return all required properties" time="0.004">
    </testcase>
    <testcase classname="useFriendRequests should return friend requests data when loaded successfully" name="useFriendRequests should return friend requests data when loaded successfully" time="0.001">
    </testcase>
    <testcase classname="useFriendRequests should return loading state when fetching friend requests" name="useFriendRequests should return loading state when fetching friend requests" time="0.001">
    </testcase>
    <testcase classname="useFriendRequests should return error when fetching friend requests fails" name="useFriendRequests should return error when fetching friend requests fails" time="0.001">
    </testcase>
    <testcase classname="useFriendRequests should handle empty friend requests list" name="useFriendRequests should handle empty friend requests list" time="0">
    </testcase>
    <testcase classname="useFriendRequests should combine friend requests with user data" name="useFriendRequests should combine friend requests with user data" time="0.001">
    </testcase>
    <testcase classname="useFriendRequests should manage friend request successfully" name="useFriendRequests should manage friend request successfully" time="0.006">
    </testcase>
    <testcase classname="useFriendRequests should handle manage friend request error" name="useFriendRequests should handle manage friend request error" time="0.016">
    </testcase>
    <testcase classname="useFriendRequests should track loading state for specific request" name="useFriendRequests should track loading state for specific request" time="0.002">
    </testcase>
    <testcase classname="useFriendRequests should reset states correctly" name="useFriendRequests should reset states correctly" time="0.003">
    </testcase>
    <testcase classname="useFriendRequests should not fetch when profileId is undefined" name="useFriendRequests should not fetch when profileId is undefined" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useHallOfFame" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.344" tests="10">
    <testcase classname="useHallOfFame should return hall of fame data when loaded successfully" name="useHallOfFame should return hall of fame data when loaded successfully" time="0.005">
    </testcase>
    <testcase classname="useHallOfFame should return loading state when fetching hall of fame" name="useHallOfFame should return loading state when fetching hall of fame" time="0.001">
    </testcase>
    <testcase classname="useHallOfFame should return error when fetching hall of fame fails" name="useHallOfFame should return error when fetching hall of fame fails" time="0.001">
    </testcase>
    <testcase classname="useHallOfFame should handle empty hall of fame data" name="useHallOfFame should handle empty hall of fame data" time="0">
    </testcase>
    <testcase classname="useHallOfFame should add book to hall of fame successfully" name="useHallOfFame should add book to hall of fame successfully" time="0.002">
    </testcase>
    <testcase classname="useHallOfFame should handle add book to hall of fame error" name="useHallOfFame should handle add book to hall of fame error" time="0.034">
    </testcase>
    <testcase classname="useHallOfFame should delete book from hall of fame successfully" name="useHallOfFame should delete book from hall of fame successfully" time="0.007">
    </testcase>
    <testcase classname="useHallOfFame should handle delete book from hall of fame error" name="useHallOfFame should handle delete book from hall of fame error" time="0.002">
    </testcase>
    <testcase classname="useHallOfFame should set loading states correctly during operations" name="useHallOfFame should set loading states correctly during operations" time="0.013">
    </testcase>
    <testcase classname="useHallOfFame should reset states correctly" name="useHallOfFame should reset states correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="BookImage" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.273" tests="6">
    <testcase classname="BookImage renders without crashing with valid props" name="BookImage renders without crashing with valid props" time="0.076">
    </testcase>
    <testcase classname="BookImage renders without crashing with different bookId" name="BookImage renders without crashing with different bookId" time="0.006">
    </testcase>
    <testcase classname="BookImage renders without crashing with empty bookId" name="BookImage renders without crashing with empty bookId" time="0.002">
    </testcase>
    <testcase classname="BookImage renders without crashing with numeric bookId" name="BookImage renders without crashing with numeric bookId" time="0.001">
    </testcase>
    <testcase classname="BookImage renders without crashing with long bookId" name="BookImage renders without crashing with long bookId" time="0.002">
    </testcase>
    <testcase classname="BookImage renders without crashing with special characters in bookId" name="BookImage renders without crashing with special characters in bookId" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useBiography" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.385" tests="9">
    <testcase classname="useBiography should return initial state" name="useBiography should return initial state" time="0.005">
    </testcase>
    <testcase classname="useBiography should handle successful biography update" name="useBiography should handle successful biography update" time="0.003">
    </testcase>
    <testcase classname="useBiography should handle biography update error" name="useBiography should handle biography update error" time="0.013">
    </testcase>
    <testcase classname="useBiography should set loading to true during update" name="useBiography should set loading to true during update" time="0.104">
    </testcase>
    <testcase classname="useBiography should handle empty biography" name="useBiography should handle empty biography" time="0.005">
    </testcase>
    <testcase classname="useBiography should handle FormData without biography field" name="useBiography should handle FormData without biography field" time="0.003">
    </testcase>
    <testcase classname="useBiography should allow manual state updates" name="useBiography should allow manual state updates" time="0.001">
    </testcase>
    <testcase classname="useBiography should reset error state on successful update" name="useBiography should reset error state on successful update" time="0.001">
    </testcase>
    <testcase classname="useBiography should call updateBiography with correct biography text" name="useBiography should call updateBiography with correct biography text" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useFriends" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.307" tests="9">
    <testcase classname="useFriends should return friends data when loaded successfully" name="useFriends should return friends data when loaded successfully" time="0.003">
    </testcase>
    <testcase classname="useFriends should return loading state when fetching friends" name="useFriends should return loading state when fetching friends" time="0.001">
    </testcase>
    <testcase classname="useFriends should return error when fetching friends fails" name="useFriends should return error when fetching friends fails" time="0.001">
    </testcase>
    <testcase classname="useFriends should handle empty friends list" name="useFriends should handle empty friends list" time="0.001">
    </testcase>
    <testcase classname="useFriends should delete friend successfully" name="useFriends should delete friend successfully" time="0.002">
    </testcase>
    <testcase classname="useFriends should handle delete friend error" name="useFriends should handle delete friend error" time="0.002">
    </testcase>
    <testcase classname="useFriends should set loading state during delete operation" name="useFriends should set loading state during delete operation" time="0.03">
    </testcase>
    <testcase classname="useFriends should use custom mutate function when provided" name="useFriends should use custom mutate function when provided" time="0.005">
    </testcase>
    <testcase classname="useFriends should reset states correctly" name="useFriends should reset states correctly" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useRemoveBook" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.382" tests="9">
    <testcase classname="useRemoveBook should return initial state" name="useRemoveBook should return initial state" time="0.007">
    </testcase>
    <testcase classname="useRemoveBook should handle successful book deletion" name="useRemoveBook should handle successful book deletion" time="0.028">
    </testcase>
    <testcase classname="useRemoveBook should handle book deletion error" name="useRemoveBook should handle book deletion error" time="0.006">
    </testcase>
    <testcase classname="useRemoveBook should handle book deletion without mutate callback" name="useRemoveBook should handle book deletion without mutate callback" time="0.002">
    </testcase>
    <testcase classname="useRemoveBook should set loading to true during deletion" name="useRemoveBook should set loading to true during deletion" time="0.105">
    </testcase>
    <testcase classname="useRemoveBook should allow manual state updates" name="useRemoveBook should allow manual state updates" time="0.003">
    </testcase>
    <testcase classname="useRemoveBook should reset states between operations" name="useRemoveBook should reset states between operations" time="0.007">
    </testcase>
    <testcase classname="useRemoveBook should handle multiple concurrent deletions" name="useRemoveBook should handle multiple concurrent deletions" time="0.004">
    </testcase>
    <testcase classname="useRemoveBook should handle empty book id" name="useRemoveBook should handle empty book id" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useAccountsUser" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.242" tests="6">
    <testcase classname="useAccountsUser should return loading state initially" name="useAccountsUser should return loading state initially" time="0.005">
    </testcase>
    <testcase classname="useAccountsUser should return user data when fetch is successful" name="useAccountsUser should return user data when fetch is successful" time="0.002">
    </testcase>
    <testcase classname="useAccountsUser should return error when fetch fails" name="useAccountsUser should return error when fetch fails" time="0">
    </testcase>
    <testcase classname="useAccountsUser should not fetch when id is empty" name="useAccountsUser should not fetch when id is empty" time="0.001">
    </testcase>
    <testcase classname="useAccountsUser should call getAccountsUser with correct id" name="useAccountsUser should call getAccountsUser with correct id" time="0.001">
    </testcase>
    <testcase classname="useAccountsUser should handle undefined id" name="useAccountsUser should handle undefined id" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useStatsPreFetch" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.297" tests="9">
    <testcase classname="useStatsPreFetch should dispatch setStatsLoading when isLoading is true" name="useStatsPreFetch should dispatch setStatsLoading when isLoading is true" time="0.002">
    </testcase>
    <testcase classname="useStatsPreFetch should dispatch setStats when data is received" name="useStatsPreFetch should dispatch setStats when data is received" time="0.001">
    </testcase>
    <testcase classname="useStatsPreFetch should dispatch setStatsError when error occurs" name="useStatsPreFetch should dispatch setStatsError when error occurs" time="0.001">
    </testcase>
    <testcase classname="useStatsPreFetch should not fetch when userId equals storedUserId" name="useStatsPreFetch should not fetch when userId equals storedUserId" time="0">
    </testcase>
    <testcase classname="useStatsPreFetch should fetch when userId is different from storedUserId" name="useStatsPreFetch should fetch when userId is different from storedUserId" time="0.001">
    </testcase>
    <testcase classname="useStatsPreFetch should not fetch when userId is undefined" name="useStatsPreFetch should not fetch when userId is undefined" time="0.002">
    </testcase>
    <testcase classname="useStatsPreFetch should handle multiple state changes correctly" name="useStatsPreFetch should handle multiple state changes correctly" time="0.004">
    </testcase>
    <testcase classname="useStatsPreFetch should handle error after successful data" name="useStatsPreFetch should handle error after successful data" time="0.002">
    </testcase>
    <testcase classname="useStatsPreFetch should handle empty stats data" name="useStatsPreFetch should handle empty stats data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FriendCard" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.248" tests="16">
    <testcase classname="FriendCard Basic Rendering renders without crashing with required props" name="FriendCard Basic Rendering renders without crashing with required props" time="0.008">
    </testcase>
    <testcase classname="FriendCard Basic Rendering renders friend username correctly" name="FriendCard Basic Rendering renders friend username correctly" time="0.011">
    </testcase>
    <testcase classname="FriendCard Basic Rendering renders friend image with correct props" name="FriendCard Basic Rendering renders friend image with correct props" time="0.003">
    </testcase>
    <testcase classname="FriendCard Basic Rendering renders delete icon" name="FriendCard Basic Rendering renders delete icon" time="0.003">
    </testcase>
    <testcase classname="FriendCard Link Behavior renders as link with correct href" name="FriendCard Link Behavior renders as link with correct href" time="0.002">
    </testcase>
    <testcase classname="FriendCard Link Behavior uses friend id in href" name="FriendCard Link Behavior uses friend id in href" time="0.002">
    </testcase>
    <testcase classname="FriendCard Delete Functionality calls handleDeleteFriend when delete button is clicked" name="FriendCard Delete Functionality calls handleDeleteFriend when delete button is clicked" time="0.001">
    </testcase>
    <testcase classname="FriendCard Delete Functionality passes correct friend id to handleDeleteFriend" name="FriendCard Delete Functionality passes correct friend id to handleDeleteFriend" time="0.001">
    </testcase>
    <testcase classname="FriendCard Delete Functionality prevents event propagation when delete button is clicked" name="FriendCard Delete Functionality prevents event propagation when delete button is clicked" time="0.001">
    </testcase>
    <testcase classname="FriendCard Loading States shows loading state when isDeleteLoading is true" name="FriendCard Loading States shows loading state when isDeleteLoading is true" time="0.001">
    </testcase>
    <testcase classname="FriendCard Loading States does not show loading state when isDeleteLoading is false" name="FriendCard Loading States does not show loading state when isDeleteLoading is false" time="0">
    </testcase>
    <testcase classname="FriendCard Friend Data displays different usernames correctly" name="FriendCard Friend Data displays different usernames correctly" time="0.001">
    </testcase>
    <testcase classname="FriendCard Friend Data uses username as alt text for image" name="FriendCard Friend Data uses username as alt text for image" time="0.001">
    </testcase>
    <testcase classname="FriendCard Friend Data displays different profile pictures" name="FriendCard Friend Data displays different profile pictures" time="0.001">
    </testcase>
    <testcase classname="FriendCard Accessibility has proper alt text for profile image" name="FriendCard Accessibility has proper alt text for profile image" time="0">
    </testcase>
    <testcase classname="FriendCard Accessibility delete button is properly labeled" name="FriendCard Accessibility delete button is properly labeled" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CustomTitle" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.209" tests="21">
    <testcase classname="CustomTitle Basic Rendering renders without crashing with minimal props" name="CustomTitle Basic Rendering renders without crashing with minimal props" time="0.003">
    </testcase>
    <testcase classname="CustomTitle Basic Rendering renders with text prop" name="CustomTitle Basic Rendering renders with text prop" time="0.002">
    </testcase>
    <testcase classname="CustomTitle Basic Rendering renders with empty text" name="CustomTitle Basic Rendering renders with empty text" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Basic Rendering renders with long text" name="CustomTitle Basic Rendering renders with long text" time="0.002">
    </testcase>
    <testcase classname="CustomTitle Props Handling applies custom size when provided" name="CustomTitle Props Handling applies custom size when provided" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Props Handling applies custom fontFamily when provided" name="CustomTitle Props Handling applies custom fontFamily when provided" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Props Handling applies custom sx when provided" name="CustomTitle Props Handling applies custom sx when provided" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Props Handling handles all props together" name="CustomTitle Props Handling handles all props together" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Default Values uses default size when size prop is not provided" name="CustomTitle Default Values uses default size when size prop is not provided" time="0">
    </testcase>
    <testcase classname="CustomTitle Default Values uses default fontFamily when fontFamily prop is not provided" name="CustomTitle Default Values uses default fontFamily when fontFamily prop is not provided" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Default Values handles undefined props gracefully" name="CustomTitle Default Values handles undefined props gracefully" time="0.002">
    </testcase>
    <testcase classname="CustomTitle Typography Props renders with correct variant" name="CustomTitle Typography Props renders with correct variant" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Typography Props passes through additional props" name="CustomTitle Typography Props passes through additional props" time="0">
    </testcase>
    <testcase classname="CustomTitle Edge Cases handles null text" name="CustomTitle Edge Cases handles null text" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Edge Cases handles numeric text" name="CustomTitle Edge Cases handles numeric text" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Edge Cases handles text with special characters" name="CustomTitle Edge Cases handles text with special characters" time="0.002">
    </testcase>
    <testcase classname="CustomTitle Edge Cases handles very large size values" name="CustomTitle Edge Cases handles very large size values" time="0.003">
    </testcase>
    <testcase classname="CustomTitle Edge Cases handles complex sx objects" name="CustomTitle Edge Cases handles complex sx objects" time="0.002">
    </testcase>
    <testcase classname="CustomTitle Component Structure renders as Typography component" name="CustomTitle Component Structure renders as Typography component" time="0.002">
    </testcase>
    <testcase classname="CustomTitle Component Structure applies fontWeight bold" name="CustomTitle Component Structure applies fontWeight bold" time="0.001">
    </testcase>
    <testcase classname="CustomTitle Component Structure applies white color" name="CustomTitle Component Structure applies white color" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useBookRatingState" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.286" tests="17">
    <testcase classname="useBookRatingState initializes with default values when no apiBook" name="useBookRatingState initializes with default values when no apiBook" time="0.003">
    </testcase>
    <testcase classname="useBookRatingState initializes with apiBook data when provided" name="useBookRatingState initializes with apiBook data when provided" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState sets progress as percent when progress is &lt;= 1" name="useBookRatingState sets progress as percent when progress is &lt;= 1" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles apiBook without userData" name="useBookRatingState handles apiBook without userData" time="0.002">
    </testcase>
    <testcase classname="useBookRatingState sets progress correctly when status is READ" name="useBookRatingState sets progress correctly when status is READ" time="0.003">
    </testcase>
    <testcase classname="useBookRatingState handles state setters correctly" name="useBookRatingState handles state setters correctly" time="0.002">
    </testcase>
    <testcase classname="useBookRatingState handles handleApply successfully with percentage progress" name="useBookRatingState handles handleApply successfully with percentage progress" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles handleApply successfully with page progress" name="useBookRatingState handles handleApply successfully with page progress" time="0.002">
    </testcase>
    <testcase classname="useBookRatingState handles handleApply when user is not available" name="useBookRatingState handles handleApply when user is not available" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles handleApply when already submitting" name="useBookRatingState handles handleApply when already submitting" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles error in handleApply" name="useBookRatingState handles error in handleApply" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles handleApply without mutate function" name="useBookRatingState handles handleApply without mutate function" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles anchorEl state" name="useBookRatingState handles anchorEl state" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles drawer state" name="useBookRatingState handles drawer state" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState returns correct user and loading states" name="useBookRatingState returns correct user and loading states" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState closes anchorEl and drawer after successful apply" name="useBookRatingState closes anchorEl and drawer after successful apply" time="0.001">
    </testcase>
    <testcase classname="useBookRatingState handles userData with undefined/null values" name="useBookRatingState handles userData with undefined/null values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BookCardCompact" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.34" tests="34">
    <testcase classname="BookCardCompact BookCardCompact Component renders without crashing with valid props" name="BookCardCompact BookCardCompact Component renders without crashing with valid props" time="0.012">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders without crashing without series" name="BookCardCompact BookCardCompact Component renders without crashing without series" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders without crashing without rating" name="BookCardCompact BookCardCompact Component renders without crashing without rating" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders without crashing without cover image" name="BookCardCompact BookCardCompact Component renders without crashing without cover image" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with small prop" name="BookCardCompact BookCardCompact Component renders with small prop" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with custom onClick handler" name="BookCardCompact BookCardCompact Component renders with custom onClick handler" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component calls custom onClick when provided" name="BookCardCompact BookCardCompact Component calls custom onClick when provided" time="0.007">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component navigates to book page when no custom onClick" name="BookCardCompact BookCardCompact Component navigates to book page when no custom onClick" time="0.004">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with long title" name="BookCardCompact BookCardCompact Component renders with long title" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with long author name" name="BookCardCompact BookCardCompact Component renders with long author name" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with different rating values" name="BookCardCompact BookCardCompact Component renders with different rating values" time="0.011">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component handles click event and prevents default" name="BookCardCompact BookCardCompact Component handles click event and prevents default" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component uses placeholder image when cover url is empty" name="BookCardCompact BookCardCompact Component uses placeholder image when cover url is empty" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component applies small dimensions when small prop is true" name="BookCardCompact BookCardCompact Component applies small dimensions when small prop is true" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component applies regular dimensions when small prop is false" name="BookCardCompact BookCardCompact Component applies regular dimensions when small prop is false" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component handles undefined rating correctly" name="BookCardCompact BookCardCompact Component handles undefined rating correctly" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders series chip when series exists" name="BookCardCompact BookCardCompact Component renders series chip when series exists" time="0.003">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component does not render series chip when series is null" name="BookCardCompact BookCardCompact Component does not render series chip when series is null" time="0.003">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component handles different book IDs correctly" name="BookCardCompact BookCardCompact Component handles different book IDs correctly" time="0.003">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component calls handleClick function correctly" name="BookCardCompact BookCardCompact Component calls handleClick function correctly" time="0.003">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component navigates correctly when no onClick provided" name="BookCardCompact BookCardCompact Component navigates correctly when no onClick provided" time="0.003">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with correct dimensions for small prop" name="BookCardCompact BookCardCompact Component renders with correct dimensions for small prop" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders with correct dimensions for regular size" name="BookCardCompact BookCardCompact Component renders with correct dimensions for regular size" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders rating component when rating is provided" name="BookCardCompact BookCardCompact Component renders rating component when rating is provided" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component does not render rating when rating is undefined" name="BookCardCompact BookCardCompact Component does not render rating when rating is undefined" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders chip when series exists" name="BookCardCompact BookCardCompact Component renders chip when series exists" time="0.005">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component does not render chip when series is null" name="BookCardCompact BookCardCompact Component does not render chip when series is null" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders image with correct src and alt" name="BookCardCompact BookCardCompact Component renders image with correct src and alt" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders placeholder image when cover url is empty" name="BookCardCompact BookCardCompact Component renders placeholder image when cover url is empty" time="0">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompact Component renders typography with correct variants" name="BookCardCompact BookCardCompact Component renders typography with correct variants" time="0.002">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompactSkeleton Component renders without crashing" name="BookCardCompact BookCardCompactSkeleton Component renders without crashing" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompactSkeleton Component renders skeleton structure" name="BookCardCompact BookCardCompactSkeleton Component renders skeleton structure" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompactSkeleton Component renders all skeleton elements" name="BookCardCompact BookCardCompactSkeleton Component renders all skeleton elements" time="0.001">
    </testcase>
    <testcase classname="BookCardCompact BookCardCompactSkeleton Component renders skeleton with correct variants and properties" name="BookCardCompact BookCardCompactSkeleton Component renders skeleton with correct variants and properties" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useUser" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.278" tests="10">
    <testcase classname="useUser should return user data when loaded successfully" name="useUser should return user data when loaded successfully" time="0.012">
    </testcase>
    <testcase classname="useUser should return loading state when fetching user" name="useUser should return loading state when fetching user" time="0.003">
    </testcase>
    <testcase classname="useUser should return error when fetching user fails" name="useUser should return error when fetching user fails" time="0.001">
    </testcase>
    <testcase classname="useUser should dispatch setProfile when user data is received" name="useUser should dispatch setProfile when user data is received" time="0.003">
    </testcase>
    <testcase classname="useUser should handle empty user data" name="useUser should handle empty user data" time="0.004">
    </testcase>
    <testcase classname="useUser should handle user data with minimal fields" name="useUser should handle user data with minimal fields" time="0.002">
    </testcase>
    <testcase classname="useUser should handle user data with all fields" name="useUser should handle user data with all fields" time="0.001">
    </testcase>
    <testcase classname="useUser should configure SWR with correct options" name="useUser should configure SWR with correct options" time="0.001">
    </testcase>
    <testcase classname="useUser should not dispatch when data is null" name="useUser should not dispatch when data is null" time="0.001">
    </testcase>
    <testcase classname="useUser should not dispatch when data is undefined" name="useUser should not dispatch when data is undefined" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useBook" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.261" tests="7">
    <testcase classname="useBook should return initial state" name="useBook should return initial state" time="0.008">
    </testcase>
    <testcase classname="useBook should handle loading state" name="useBook should handle loading state" time="0.002">
    </testcase>
    <testcase classname="useBook should handle error state" name="useBook should handle error state" time="0.003">
    </testcase>
    <testcase classname="useBook should call fetchBookById with correct id" name="useBook should call fetchBookById with correct id" time="0.003">
    </testcase>
    <testcase classname="useBook should not fetch when id is empty" name="useBook should not fetch when id is empty" time="0">
    </testcase>
    <testcase classname="useBook should return undefined data when no book is found" name="useBook should return undefined data when no book is found" time="0.001">
    </testcase>
    <testcase classname="useBook should handle successful data fetching" name="useBook should handle successful data fetching" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useDebounce" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.259" tests="7">
    <testcase classname="useDebounce should return initial value immediately" name="useDebounce should return initial value immediately" time="0.002">
    </testcase>
    <testcase classname="useDebounce should return debounced value after delay" name="useDebounce should return debounced value after delay" time="0.007">
    </testcase>
    <testcase classname="useDebounce should reset timer when value changes before delay expires" name="useDebounce should reset timer when value changes before delay expires" time="0.001">
    </testcase>
    <testcase classname="useDebounce should handle different delay values" name="useDebounce should handle different delay values" time="0.001">
    </testcase>
    <testcase classname="useDebounce should handle zero delay" name="useDebounce should handle zero delay" time="0.001">
    </testcase>
    <testcase classname="useDebounce should handle different value types" name="useDebounce should handle different value types" time="0.002">
    </testcase>
    <testcase classname="useDebounce should clear timeout on unmount" name="useDebounce should clear timeout on unmount" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="FriendCardSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.342" tests="11">
    <testcase classname="FriendCardSkeleton Basic Rendering renders without crashing" name="FriendCardSkeleton Basic Rendering renders without crashing" time="0.005">
    </testcase>
    <testcase classname="FriendCardSkeleton Basic Rendering renders the main card container" name="FriendCardSkeleton Basic Rendering renders the main card container" time="0.002">
    </testcase>
    <testcase classname="FriendCardSkeleton Basic Rendering renders circular skeleton for avatar" name="FriendCardSkeleton Basic Rendering renders circular skeleton for avatar" time="0.001">
    </testcase>
    <testcase classname="FriendCardSkeleton Basic Rendering renders text skeleton for username" name="FriendCardSkeleton Basic Rendering renders text skeleton for username" time="0.003">
    </testcase>
    <testcase classname="FriendCardSkeleton Skeleton Structure has correct layout with flexbox" name="FriendCardSkeleton Skeleton Structure has correct layout with flexbox" time="0.004">
    </testcase>
    <testcase classname="FriendCardSkeleton Skeleton Structure renders all required skeleton elements" name="FriendCardSkeleton Skeleton Structure renders all required skeleton elements" time="0.006">
    </testcase>
    <testcase classname="FriendCardSkeleton Styling and Dimensions avatar skeleton has correct dimensions" name="FriendCardSkeleton Styling and Dimensions avatar skeleton has correct dimensions" time="0.003">
    </testcase>
    <testcase classname="FriendCardSkeleton Styling and Dimensions username skeleton has correct dimensions" name="FriendCardSkeleton Styling and Dimensions username skeleton has correct dimensions" time="0.001">
    </testcase>
    <testcase classname="FriendCardSkeleton Multiple Instances can render multiple skeleton instances" name="FriendCardSkeleton Multiple Instances can render multiple skeleton instances" time="0.007">
    </testcase>
    <testcase classname="FriendCardSkeleton Multiple Instances each instance is independent" name="FriendCardSkeleton Multiple Instances each instance is independent" time="0.055">
    </testcase>
    <testcase classname="FriendCardSkeleton Accessibility skeleton elements are present" name="FriendCardSkeleton Accessibility skeleton elements are present" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="useActivities" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.312" tests="11">
    <testcase classname="useActivities should return loading state initially" name="useActivities should return loading state initially" time="0.002">
    </testcase>
    <testcase classname="useActivities should return formatted activities when fetch is successful" name="useActivities should return formatted activities when fetch is successful" time="0.001">
    </testcase>
    <testcase classname="useActivities should filter out activities without date" name="useActivities should filter out activities without date" time="0.003">
    </testcase>
    <testcase classname="useActivities should sort activities by date (most recent first)" name="useActivities should sort activities by date (most recent first)" time="0.003">
    </testcase>
    <testcase classname="useActivities should extract bookId from message correctly" name="useActivities should extract bookId from message correctly" time="0.005">
    </testcase>
    <testcase classname="useActivities should clean message by removing bookId prefix" name="useActivities should clean message by removing bookId prefix" time="0.001">
    </testcase>
    <testcase classname="useActivities should return error when fetch fails" name="useActivities should return error when fetch fails" time="0">
    </testcase>
    <testcase classname="useActivities should handle empty data array" name="useActivities should handle empty data array" time="0.001">
    </testcase>
    <testcase classname="useActivities should handle undefined data" name="useActivities should handle undefined data" time="0.001">
    </testcase>
    <testcase classname="useActivities should call fetchActivities with correct id" name="useActivities should call fetchActivities with correct id" time="0">
    </testcase>
    <testcase classname="useActivities should handle undefined id" name="useActivities should handle undefined id" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BookRatingProgressInput" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:05" time="0.337" tests="23">
    <testcase classname="BookRatingProgressInput renders without crashing" name="BookRatingProgressInput renders without crashing" time="0.008">
    </testcase>
    <testcase classname="BookRatingProgressInput displays current progress value" name="BookRatingProgressInput displays current progress value" time="0.003">
    </testcase>
    <testcase classname="BookRatingProgressInput shows percentage indicator when isProgressPercent is true" name="BookRatingProgressInput shows percentage indicator when isProgressPercent is true" time="0.016">
    </testcase>
    <testcase classname="BookRatingProgressInput shows pages indicator when isProgressPercent is false" name="BookRatingProgressInput shows pages indicator when isProgressPercent is false" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput calls setTempProgress when input value changes" name="BookRatingProgressInput calls setTempProgress when input value changes" time="0.002">
    </testcase>
    <testcase classname="BookRatingProgressInput renders percentage button as contained when isProgressPercent is true" name="BookRatingProgressInput renders percentage button as contained when isProgressPercent is true" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput renders pages button as outlined when isProgressPercent is true" name="BookRatingProgressInput renders pages button as outlined when isProgressPercent is true" time="0">
    </testcase>
    <testcase classname="BookRatingProgressInput renders pages button as contained when isProgressPercent is false" name="BookRatingProgressInput renders pages button as contained when isProgressPercent is false" time="0.002">
    </testcase>
    <testcase classname="BookRatingProgressInput renders percentage button as outlined when isProgressPercent is false" name="BookRatingProgressInput renders percentage button as outlined when isProgressPercent is false" time="0.002">
    </testcase>
    <testcase classname="BookRatingProgressInput calls setIsProgressPercent(true) when percentage button is clicked" name="BookRatingProgressInput calls setIsProgressPercent(true) when percentage button is clicked" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput calls setIsProgressPercent(false) when pages button is clicked" name="BookRatingProgressInput calls setIsProgressPercent(false) when pages button is clicked" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput handles zero progress value" name="BookRatingProgressInput handles zero progress value" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput handles large progress values" name="BookRatingProgressInput handles large progress values" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput applies custom font family" name="BookRatingProgressInput applies custom font family" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput handles negative progress values" name="BookRatingProgressInput handles negative progress values" time="0">
    </testcase>
    <testcase classname="BookRatingProgressInput handles decimal progress values" name="BookRatingProgressInput handles decimal progress values" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput handles non-numeric input gracefully" name="BookRatingProgressInput handles non-numeric input gracefully" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput handles empty input" name="BookRatingProgressInput handles empty input" time="0.001">
    </testcase>
    <testcase classname="BookRatingProgressInput renders correct Progress label" name="BookRatingProgressInput renders correct Progress label" time="0">
    </testcase>
    <testcase classname="BookRatingProgressInput toggles between percentage and pages modes" name="BookRatingProgressInput toggles between percentage and pages modes" time="0.005">
    </testcase>
    <testcase classname="BookRatingProgressInput renders both buttons regardless of current mode" name="BookRatingProgressInput renders both buttons regardless of current mode" time="0.002">
    </testcase>
    <testcase classname="BookRatingProgressInput handles very large progress values" name="BookRatingProgressInput handles very large progress values" time="0.002">
    </testcase>
    <testcase classname="BookRatingProgressInput maintains button state consistency" name="BookRatingProgressInput maintains button state consistency" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="LottieAnimation" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.195" tests="6">
    <testcase classname="LottieAnimation renders without crashing with required props" name="LottieAnimation renders without crashing with required props" time="0.004">
    </testcase>
    <testcase classname="LottieAnimation renders the lottie mock element" name="LottieAnimation renders the lottie mock element" time="0.003">
    </testcase>
    <testcase classname="LottieAnimation passes animationData prop" name="LottieAnimation passes animationData prop" time="0.001">
    </testcase>
    <testcase classname="LottieAnimation sets loop and autoplay to true by default" name="LottieAnimation sets loop and autoplay to true by default" time="0">
    </testcase>
    <testcase classname="LottieAnimation sets loop and autoplay to false when specified" name="LottieAnimation sets loop and autoplay to false when specified" time="0.001">
    </testcase>
    <testcase classname="LottieAnimation applies className prop" name="LottieAnimation applies className prop" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useUpdateHallOfFame" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.224" tests="8">
    <testcase classname="useUpdateHallOfFame should update hall of fame successfully" name="useUpdateHallOfFame should update hall of fame successfully" time="0.007">
    </testcase>
    <testcase classname="useUpdateHallOfFame should handle update hall of fame error" name="useUpdateHallOfFame should handle update hall of fame error" time="0.002">
    </testcase>
    <testcase classname="useUpdateHallOfFame should set loading state during update operation" name="useUpdateHallOfFame should set loading state during update operation" time="0.003">
    </testcase>
    <testcase classname="useUpdateHallOfFame should reset states correctly" name="useUpdateHallOfFame should reset states correctly" time="0.001">
    </testcase>
    <testcase classname="useUpdateHallOfFame should handle empty form data" name="useUpdateHallOfFame should handle empty form data" time="0.001">
    </testcase>
    <testcase classname="useUpdateHallOfFame should handle complex form data with multiple fields" name="useUpdateHallOfFame should handle complex form data with multiple fields" time="0.001">
    </testcase>
    <testcase classname="useUpdateHallOfFame should handle network timeout error" name="useUpdateHallOfFame should handle network timeout error" time="0.003">
    </testcase>
    <testcase classname="useUpdateHallOfFame should handle validation error from server" name="useUpdateHallOfFame should handle validation error from server" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useApiBook" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.226" tests="8">
    <testcase classname="useApiBook should return loading state initially" name="useApiBook should return loading state initially" time="0.004">
    </testcase>
    <testcase classname="useApiBook should return api book data when fetch is successful" name="useApiBook should return api book data when fetch is successful" time="0.003">
    </testcase>
    <testcase classname="useApiBook should return error when fetch fails" name="useApiBook should return error when fetch fails" time="0.001">
    </testcase>
    <testcase classname="useApiBook should not fetch when id is empty" name="useApiBook should not fetch when id is empty" time="0.001">
    </testcase>
    <testcase classname="useApiBook should call getApiBook with correct id" name="useApiBook should call getApiBook with correct id" time="0">
    </testcase>
    <testcase classname="useApiBook should handle undefined data" name="useApiBook should handle undefined data" time="0.001">
    </testcase>
    <testcase classname="useApiBook should expose mutate function correctly" name="useApiBook should expose mutate function correctly" time="0">
    </testcase>
    <testcase classname="useApiBook should handle mutate with data and options" name="useApiBook should handle mutate with data and options" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CustomButton" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.23" tests="29">
    <testcase classname="CustomButton Basic Rendering renders without crashing with minimal props" name="CustomButton Basic Rendering renders without crashing with minimal props" time="0.003">
    </testcase>
    <testcase classname="CustomButton Basic Rendering renders children correctly" name="CustomButton Basic Rendering renders children correctly" time="0.002">
    </testcase>
    <testcase classname="CustomButton Basic Rendering renders with different text content" name="CustomButton Basic Rendering renders with different text content" time="0">
    </testcase>
    <testcase classname="CustomButton Button Types renders ACTION type by default" name="CustomButton Button Types renders ACTION type by default" time="0.001">
    </testcase>
    <testcase classname="CustomButton Button Types renders CANCEL type" name="CustomButton Button Types renders CANCEL type" time="0.001">
    </testcase>
    <testcase classname="CustomButton Button Types handles both ACTION and CANCEL types" name="CustomButton Button Types handles both ACTION and CANCEL types" time="0.002">
    </testcase>
    <testcase classname="CustomButton Variants renders contained variant by default" name="CustomButton Variants renders contained variant by default" time="0.004">
    </testcase>
    <testcase classname="CustomButton Variants renders outlined variant" name="CustomButton Variants renders outlined variant" time="0.002">
    </testcase>
    <testcase classname="CustomButton Variants handles both contained and outlined variants" name="CustomButton Variants handles both contained and outlined variants" time="0.002">
    </testcase>
    <testcase classname="CustomButton Component Variants renders as button by default" name="CustomButton Component Variants renders as button by default" time="0.001">
    </testcase>
    <testcase classname="CustomButton Component Variants renders as link when variantComponent is link" name="CustomButton Component Variants renders as link when variantComponent is link" time="0.001">
    </testcase>
    <testcase classname="CustomButton Component Variants handles both button and link variants" name="CustomButton Component Variants handles both button and link variants" time="0.001">
    </testcase>
    <testcase classname="CustomButton Icons renders with startIcon" name="CustomButton Icons renders with startIcon" time="0.002">
    </testcase>
    <testcase classname="CustomButton Icons renders with endIcon" name="CustomButton Icons renders with endIcon" time="0.001">
    </testcase>
    <testcase classname="CustomButton Icons renders with both start and end icons" name="CustomButton Icons renders with both start and end icons" time="0.003">
    </testcase>
    <testcase classname="CustomButton Icons renders without icons" name="CustomButton Icons renders without icons" time="0.002">
    </testcase>
    <testcase classname="CustomButton States handles disabled state" name="CustomButton States handles disabled state" time="0.002">
    </testcase>
    <testcase classname="CustomButton States handles loading state" name="CustomButton States handles loading state" time="0.001">
    </testcase>
    <testcase classname="CustomButton States handles both disabled and loading states" name="CustomButton States handles both disabled and loading states" time="0.001">
    </testcase>
    <testcase classname="CustomButton Events calls onClick when clicked" name="CustomButton Events calls onClick when clicked" time="0.002">
    </testcase>
    <testcase classname="CustomButton Events does not call onClick when disabled" name="CustomButton Events does not call onClick when disabled" time="0.002">
    </testcase>
    <testcase classname="CustomButton Events does not call onClick when loading" name="CustomButton Events does not call onClick when loading" time="0.001">
    </testcase>
    <testcase classname="CustomButton Link Props handles href and target for links" name="CustomButton Link Props handles href and target for links" time="0.003">
    </testcase>
    <testcase classname="CustomButton Link Props ignores href and target for buttons" name="CustomButton Link Props ignores href and target for buttons" time="0.003">
    </testcase>
    <testcase classname="CustomButton Styling Props accepts custom sx prop" name="CustomButton Styling Props accepts custom sx prop" time="0">
    </testcase>
    <testcase classname="CustomButton Styling Props handles complex sx objects" name="CustomButton Styling Props handles complex sx objects" time="0.001">
    </testcase>
    <testcase classname="CustomButton Complex Combinations renders with all props combined" name="CustomButton Complex Combinations renders with all props combined" time="0.001">
    </testcase>
    <testcase classname="CustomButton Complex Combinations handles loading ACTION button with icons" name="CustomButton Complex Combinations handles loading ACTION button with icons" time="0.001">
    </testcase>
    <testcase classname="CustomButton Complex Combinations handles disabled CANCEL link with custom styling" name="CustomButton Complex Combinations handles disabled CANCEL link with custom styling" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useFriendRequestsCount" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.199" tests="8">
    <testcase classname="useFriendRequestsCount should return friend requests count when loaded successfully" name="useFriendRequestsCount should return friend requests count when loaded successfully" time="0.003">
    </testcase>
    <testcase classname="useFriendRequestsCount should return loading state when fetching friend requests" name="useFriendRequestsCount should return loading state when fetching friend requests" time="0.001">
    </testcase>
    <testcase classname="useFriendRequestsCount should return error when fetching friend requests fails" name="useFriendRequestsCount should return error when fetching friend requests fails" time="0">
    </testcase>
    <testcase classname="useFriendRequestsCount should handle empty friend requests list" name="useFriendRequestsCount should handle empty friend requests list" time="0.003">
    </testcase>
    <testcase classname="useFriendRequestsCount should handle null data" name="useFriendRequestsCount should handle null data" time="0.003">
    </testcase>
    <testcase classname="useFriendRequestsCount should not fetch when profileId is undefined" name="useFriendRequestsCount should not fetch when profileId is undefined" time="0.002">
    </testcase>
    <testcase classname="useFriendRequestsCount should call getFriendRequests with correct profileId" name="useFriendRequestsCount should call getFriendRequests with correct profileId" time="0.001">
    </testcase>
    <testcase classname="useFriendRequestsCount should return mutate function" name="useFriendRequestsCount should return mutate function" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BookRatingOptions" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.211" tests="14">
    <testcase classname="BookRatingOptions exports correct number of status options" name="BookRatingOptions exports correct number of status options" time="0">
    </testcase>
    <testcase classname="BookRatingOptions contains Want to read option" name="BookRatingOptions contains Want to read option" time="0.001">
    </testcase>
    <testcase classname="BookRatingOptions contains Reading option" name="BookRatingOptions contains Reading option" time="0">
    </testcase>
    <testcase classname="BookRatingOptions contains Read option" name="BookRatingOptions contains Read option" time="0.001">
    </testcase>
    <testcase classname="BookRatingOptions all options have required properties" name="BookRatingOptions all options have required properties" time="0.002">
    </testcase>
    <testcase classname="BookRatingOptions has unique values for all options" name="BookRatingOptions has unique values for all options" time="0">
    </testcase>
    <testcase classname="BookRatingOptions has unique labels for all options" name="BookRatingOptions has unique labels for all options" time="0">
    </testcase>
    <testcase classname="BookRatingOptions options are in the expected order" name="BookRatingOptions options are in the expected order" time="0">
    </testcase>
    <testcase classname="BookRatingOptions all labels are non-empty strings" name="BookRatingOptions all labels are non-empty strings" time="0.001">
    </testcase>
    <testcase classname="BookRatingOptions all icons are React elements" name="BookRatingOptions all icons are React elements" time="0">
    </testcase>
    <testcase classname="BookRatingOptions icons have correct Material-UI icon types" name="BookRatingOptions icons have correct Material-UI icon types" time="0">
    </testcase>
    <testcase classname="BookRatingOptions exports StatusOption interface correctly" name="BookRatingOptions exports StatusOption interface correctly" time="0.001">
    </testcase>
    <testcase classname="BookRatingOptions handles EStatus enum values correctly" name="BookRatingOptions handles EStatus enum values correctly" time="0">
    </testcase>
    <testcase classname="BookRatingOptions maintains consistent naming convention" name="BookRatingOptions maintains consistent naming convention" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BooksList" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.218" tests="4">
    <testcase classname="BooksList renders book cards for each book" name="BooksList renders book cards for each book" time="0.002">
    </testcase>
    <testcase classname="BooksList shows &quot;All books loaded&quot; when hasMore is false and books exist" name="BooksList shows &quot;All books loaded&quot; when hasMore is false and books exist" time="0.002">
    </testcase>
    <testcase classname="BooksList does not show &quot;All books loaded&quot; when hasMore is true" name="BooksList does not show &quot;All books loaded&quot; when hasMore is true" time="0.002">
    </testcase>
    <testcase classname="BooksList does not show &quot;All books loaded&quot; when books list is empty" name="BooksList does not show &quot;All books loaded&quot; when books list is empty" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useStats" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.197" tests="9">
    <testcase classname="useStats should return initial state with undefined data" name="useStats should return initial state with undefined data" time="0.002">
    </testcase>
    <testcase classname="useStats should handle loading state" name="useStats should handle loading state" time="0.001">
    </testcase>
    <testcase classname="useStats should handle error state" name="useStats should handle error state" time="0.003">
    </testcase>
    <testcase classname="useStats should call getStats with correct userId" name="useStats should call getStats with correct userId" time="0.001">
    </testcase>
    <testcase classname="useStats should not fetch when userId is empty" name="useStats should not fetch when userId is empty" time="0.001">
    </testcase>
    <testcase classname="useStats should handle undefined userId" name="useStats should handle undefined userId" time="0.002">
    </testcase>
    <testcase classname="useStats should return undefined data when no stats are found" name="useStats should return undefined data when no stats are found" time="0">
    </testcase>
    <testcase classname="useStats should handle successful data fetching with complex stats" name="useStats should handle successful data fetching with complex stats" time="0.001">
    </testcase>
    <testcase classname="useStats should handle empty stats object" name="useStats should handle empty stats object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useApiBookPublic" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.202" tests="8">
    <testcase classname="useApiBookPublic should return loading state initially" name="useApiBookPublic should return loading state initially" time="0.003">
    </testcase>
    <testcase classname="useApiBookPublic should return api book data when fetch is successful" name="useApiBookPublic should return api book data when fetch is successful" time="0.001">
    </testcase>
    <testcase classname="useApiBookPublic should return error when fetch fails" name="useApiBookPublic should return error when fetch fails" time="0.001">
    </testcase>
    <testcase classname="useApiBookPublic should call getApiBookPublic with correct URL and id" name="useApiBookPublic should call getApiBookPublic with correct URL and id" time="0">
    </testcase>
    <testcase classname="useApiBookPublic should handle undefined data" name="useApiBookPublic should handle undefined data" time="0">
    </testcase>
    <testcase classname="useApiBookPublic should expose mutate function correctly" name="useApiBookPublic should expose mutate function correctly" time="0">
    </testcase>
    <testcase classname="useApiBookPublic should handle mutate with data and options" name="useApiBookPublic should handle mutate with data and options" time="0">
    </testcase>
    <testcase classname="useApiBookPublic should handle different book IDs correctly" name="useApiBookPublic should handle different book IDs correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RatingStars" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:06" time="0.212" tests="17">
    <testcase classname="RatingStars Initial Rendering renders 5 stars by default" name="RatingStars Initial Rendering renders 5 stars by default" time="0.005">
    </testcase>
    <testcase classname="RatingStars Initial Rendering renders with correct rating display" name="RatingStars Initial Rendering renders with correct rating display" time="0.003">
    </testcase>
    <testcase classname="RatingStars Initial Rendering handles invalid rating values" name="RatingStars Initial Rendering handles invalid rating values" time="0.001">
    </testcase>
    <testcase classname="RatingStars Initial Rendering handles non-numeric rating values" name="RatingStars Initial Rendering handles non-numeric rating values" time="0.001">
    </testcase>
    <testcase classname="RatingStars Size Variants renders small size correctly" name="RatingStars Size Variants renders small size correctly" time="0.004">
    </testcase>
    <testcase classname="RatingStars Size Variants renders medium size correctly" name="RatingStars Size Variants renders medium size correctly" time="0.004">
    </testcase>
    <testcase classname="RatingStars Size Variants renders large size correctly" name="RatingStars Size Variants renders large size correctly" time="0.002">
    </testcase>
    <testcase classname="RatingStars Disabled State renders when disabled" name="RatingStars Disabled State renders when disabled" time="0.001">
    </testcase>
    <testcase classname="RatingStars Disabled State does not call onRatingChange when disabled" name="RatingStars Disabled State does not call onRatingChange when disabled" time="0.005">
    </testcase>
    <testcase classname="RatingStars Loading State renders skeleton when loading" name="RatingStars Loading State renders skeleton when loading" time="0.003">
    </testcase>
    <testcase classname="RatingStars Interactive Functionality renders interactive stars" name="RatingStars Interactive Functionality renders interactive stars" time="0.003">
    </testcase>
    <testcase classname="RatingStars Edge Cases handles rating of 0 correctly" name="RatingStars Edge Cases handles rating of 0 correctly" time="0.001">
    </testcase>
    <testcase classname="RatingStars Edge Cases handles rating of 5 correctly" name="RatingStars Edge Cases handles rating of 5 correctly" time="0.001">
    </testcase>
    <testcase classname="RatingStars Edge Cases handles decimal ratings correctly" name="RatingStars Edge Cases handles decimal ratings correctly" time="0.001">
    </testcase>
    <testcase classname="RatingStars Edge Cases handles negative ratings as 0" name="RatingStars Edge Cases handles negative ratings as 0" time="0.001">
    </testcase>
    <testcase classname="RatingStars Edge Cases handles ratings greater than 5 as 5" name="RatingStars Edge Cases handles ratings greater than 5 as 5" time="0.001">
    </testcase>
    <testcase classname="RatingStars Custom Styling renders with custom sx prop without errors" name="RatingStars Custom Styling renders with custom sx prop without errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FriendRequest" errors="0" failures="0" skipped="0" timestamp="2025-09-23T12:18:01" time="16.918" tests="8">
    <testcase classname="FriendRequest Basic Rendering renders without crashing with required props" name="FriendRequest Basic Rendering renders without crashing with required props" time="0.019">
    </testcase>
    <testcase classname="FriendRequest Basic Rendering renders user username correctly" name="FriendRequest Basic Rendering renders user username correctly" time="0.003">
    </testcase>
    <testcase classname="FriendRequest Basic Rendering renders user image with correct props" name="FriendRequest Basic Rendering renders user image with correct props" time="0.002">
    </testcase>
    <testcase classname="FriendRequest Action Buttons renders accept and deny buttons" name="FriendRequest Action Buttons renders accept and deny buttons" time="0.002">
    </testcase>
    <testcase classname="FriendRequest Action Buttons calls handleManageRequest with ACCEPT when accept button is clicked" name="FriendRequest Action Buttons calls handleManageRequest with ACCEPT when accept button is clicked" time="0.005">
    </testcase>
    <testcase classname="FriendRequest Action Buttons calls handleManageRequest with DENY when deny button is clicked" name="FriendRequest Action Buttons calls handleManageRequest with DENY when deny button is clicked" time="0.002">
    </testcase>
    <testcase classname="FriendRequest Action Buttons disables buttons when loading" name="FriendRequest Action Buttons disables buttons when loading" time="0.001">
    </testcase>
    <testcase classname="FriendRequest Null User renders empty username and image when user is null" name="FriendRequest Null User renders empty username and image when user is null" time="0.001">
    </testcase>
  </testsuite>
</testsuites>