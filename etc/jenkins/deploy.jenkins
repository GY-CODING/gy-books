pipeline {
    agent any

    environment {
        NVM_DIR = "${WORKSPACE}/.nvm"

        GITHUB_USER = 'gy-gfigueras'
        GITHUB_TOKEN = credentials('FRONT_GITHUB_TOKEN')

        MAIN_REPO = 'GY-CODING/gy-books'
        FORK_REPO = "${GITHUB_USER}/gy-books"
        WORKSPACE_DIR = 'WingWords'
        VERCEL_DEPLOY_URL = credentials('WINGWORDS_VERCEL_DEPLOY_URL')
    }

    stages {
        stage('Prepare Repository') {
            steps {
                script {
                    if (fileExists(WORKSPACE_DIR)) {
                        echo "Repository already exists, updating..."
                        dir(WORKSPACE_DIR) {
                            sh '''
                                git reset --hard
                                git clean -fd
                                git checkout main
                                git fetch origin
                                git reset --hard origin/main
                            '''
                        }
                    } else {
                        echo "Cloning repository..."
                        sh '''
                            git clone https://$GITHUB_USER:$GITHUB_TOKEN@github.com/$FORK_REPO.git $WORKSPACE_DIR
                        '''
                    }
                }
            }
        }
          stage('Run Tests') {
            steps {
                script {
                    try {
                        // Llamar al pipeline de test usando la ruta completa
                        build job: 'Front/Test/WingWords',
                              wait: true,
                              propagate: true
                    } catch (Exception e) {
                        echo "Error calling test job: ${e.getMessage()}"
                        echo "Job path: Front/Test/WingWords"
                        throw e
                    }
                }
            }
        }

        stage('Sync Fork') {
            steps {
                script {
                    dir(WORKSPACE_DIR) {
                        sh '''
                            git remote add upstream https://github.com/$MAIN_REPO.git || true
                            git fetch upstream
                            git checkout main
                            git merge upstream/main --allow-unrelated-histories
                            git push origin main
                        '''
                    }
                }
            }
        }

        stage('Deploy to Vercel') {
            steps {
                script {
                    def response = sh(script: "curl -X POST $VERCEL_DEPLOY_URL", returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def json = jsonSlurper.parseText(response)
                    env.DEPLOY_URL = json.url
                    echo "Deployment URL: ${env.DEPLOY_URL}"
                }
            }
        }

        stage('Deploying') {
            steps {
                script {
                    def maxRetries = 30
                    def retryCount = 0
                    def deploymentReady = false

                    while (!deploymentReady && retryCount < maxRetries) {
                        sleep 10 // Wait 10 seconds between checks
                        def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${env.DEPLOY_URL}", returnStdout: true).trim()
                        if (status == '200') {
                            deploymentReady = true
                            echo "Deployment is ready!"
                        } else {
                            echo "Deployment not ready yet (status: ${status}), retrying... (${retryCount + 1}/${maxRetries})"
                            retryCount++
                        }
                    }

                    if (!deploymentReady) {
                        error("Deployment did not complete within the expected time.")
                    }
                }
            }
        }

        stage('Create Release') {
            steps {
                script {
                    def WORKFLOW_FILE = "release.yml"

                    sh """
                        curl -X POST https://api.github.com/repos/$MAIN_REPO/actions/workflows/$WORKFLOW_FILE/dispatches \
                            -H "Accept: application/vnd.github.v3+json" \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -d '{ "ref": "main" }'
                    """
                }
            }
        }
    }
}
