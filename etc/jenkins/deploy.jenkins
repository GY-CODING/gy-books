pipeline {
  agent any

  environment {
    WORKSPACE_DIR = 'WingWords'
    NVM_DIR = "${WORKSPACE}/.nvm"
    VERCEL_DEPLOYMENT_TOKEN = credentials('VERCEL_DEPLOYMENT_TOKEN')
    GITHUB_USER = 'gy-gfigueras'
    MAIN_REPO = 'GY-CODING/gy-books'
    FORK_REPO = "${GITHUB_USER}/gy-books"
  }

  stages {
    stage('Prepare Workspace') {
      steps {
        script {
          if (fileExists(WORKSPACE_DIR)) {
            echo "WingWords directory already exists, cleaning..."
            dir(WORKSPACE_DIR) {
              sh 'rm -rf * .nvm with-node.sh'
            }
          } else {
            echo "Creating WingWords directory..."
            sh "mkdir -p $WORKSPACE_DIR"
          }
        }
      }
    }

    stage('Install Node') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            mkdir -p "$NVM_DIR"
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 18

            # Crear wrapper para ejecutar npm con Node 18
            echo '#!/bin/bash' > with-node.sh
            echo 'export NVM_DIR="$NVM_DIR"' >> with-node.sh
            echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
            echo 'nvm use 18 > /dev/null' >> with-node.sh
            echo 'exec "$@"' >> with-node.sh
            chmod +x with-node.sh

            echo ">>> Node y npm instalados:"
            ./with-node.sh node -v
            ./with-node.sh npm -v
          '''
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        dir(WORKSPACE_DIR) {
          sh './with-node.sh npm install'
        }
      }
    }

    stage('Run Tests') {
      steps {
        script {
          try {
            build job: 'Front/Test/WingWords',
                  wait: true,
                  propagate: true
          } catch (Exception e) {
            echo "Error calling test job: ${e.getMessage()}"
            throw e
          }
        }
      }
    }

    stage('Deploy to Vercel') {
  environment {
    VERCEL_DEPLOYMENT_TOKEN = credentials('VERCEL_DEPLOYMENT_TOKEN')
  }
  steps {
    dir(WORKSPACE_DIR) {
      script {
        echo "Iniciando despliegue vía API Vercel..."
        sh(script: '''
          DEPLOY_PAYLOAD=$(cat <<EOF
          {
            "name": "gy-books",
            "target": "production",
            "gitSource": {
              "type": "github",
              "repoId": "GY-CODING/gy-books",
              "org": "GY-CODING",
              "repo": "gy-books",
              "ref": "main"
            }
          }
EOF
          )
          curl -s -X POST https://api.vercel.com/v13/deployments \
            -H "Authorization: Bearer $VERCEL_DEPLOYMENT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$DEPLOY_PAYLOAD"
        ''', env: [VERCEL_DEPLOYMENT_TOKEN: "${VERCEL_DEPLOYMENT_TOKEN}"])
      }
    }
  }
}


    stage('Create Release') {
      steps {
        echo 'Creando release...'
        // aquí tu lógica de release
      }
    }
  }
}
