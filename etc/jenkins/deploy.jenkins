pipeline {
    agent any

    environment {
        NVM_DIR = "${WORKSPACE}/.nvm"

        GITHUB_USER = 'gy-gfigueras'
        GITHUB_TOKEN = credentials('FRONT_GITHUB_TOKEN')

        MAIN_REPO = 'GY-CODING/gy-books'
        FORK_REPO = "${GITHUB_USER}/gy-books"
        WORKSPACE_DIR = 'WingWords'

        VERCEL_TOKEN = credentials('VERCEL_DEPLOYMENT_TOKEN')
        VERCEL_PROJECT_NAME = 'gy-books'
    }

    stages {
        stage('Prepare Repository') {
            steps {
                script {
                    if (fileExists(WORKSPACE_DIR)) {
                        echo "Repository already exists, updating..."
                        dir(WORKSPACE_DIR) {
                            sh '''
                                git reset --hard
                                git clean -fd
                                git checkout main
                                git fetch origin
                                git reset --hard origin/main
                            '''
                        }
                    } else {
                        echo "Cloning repository..."
                        sh '''
                            git clone https://$GITHUB_USER:$GITHUB_TOKEN@github.com/$FORK_REPO.git $WORKSPACE_DIR
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    build job: 'Front/Test/WingWords',
                          wait: true,
                          propagate: true
                }
            }
        }

        stage('Sync Fork') {
            steps {
                script {
                    dir(WORKSPACE_DIR) {
                        sh '''
                            git remote add upstream https://github.com/$MAIN_REPO.git || true
                            git fetch upstream
                            git checkout main
                            git merge upstream/main --allow-unrelated-histories
                            git push origin main
                        '''
                    }
                }
            }
        }

        stage('Connect with Vercel') {
            steps {
                script {
                    echo "🔌 Starting deployment to Vercel..."

                    def response = sh(
                        script: """curl -s -X POST https://api.vercel.com/v13/deployments \
                          -H "Authorization: Bearer ${VERCEL_TOKEN}" \
                          -H "Content-Type: application/json" \
                          -d '{
                                "name": "${VERCEL_PROJECT_NAME}",
                                "gitSource": {
                                    "type": "github",
                                    "repoId": "${FORK_REPO}",
                                    "ref": "main"
                                }
                              }'""",
                        returnStdout: true
                    ).trim()

                    // Mostrar la respuesta cruda para debug
                    echo "Vercel response: ${response}"

                    def json = new groovy.json.JsonSlurper().parseText(response)

                    if (json.error) {
                        error("Vercel deployment failed: ${json.error.message}")
                    }

                    env.DEPLOYMENT_ID = json.id
                    env.DEPLOYMENT_URL = json.url

                    echo "Deployment started: ID=${env.DEPLOYMENT_ID}, URL=https://${env.DEPLOYMENT_URL}"
                }
            }
        }

        stage('Deployment') {
            steps {
                script {
                    def maxRetries = 60
                    def retryCount = 0
                    def ready = false

                    while (!ready && retryCount < maxRetries) {
                        sleep 10
                        def statusResp = sh(
                            script: """curl -s -H "Authorization: Bearer ${VERCEL_TOKEN}" \
                                        https://api.vercel.com/v13/deployments/${DEPLOYMENT_ID}""",
                            returnStdout: true
                        ).trim()

                        def statusJson = new groovy.json.JsonSlurper().parseText(statusResp)
                        def state = statusJson.readyState

                        if (state == "READY") {
                            echo "✅ Deployment READY at https://${DEPLOYMENT_URL}"
                            ready = true
                        } else if (state == "ERROR") {
                            error("❌ Deployment failed! Response: ${statusResp}")
                        } else {
                            echo "⏳ Deployment still ${state}... retrying (${retryCount + 1}/${maxRetries})"
                            retryCount++
                        }
                    }

                    if (!ready) {
                        error("❌ Deployment did not finish in time.")
                    }
                }
            }
        }

        stage('Create Release') {
            steps {
                script {
                    def WORKFLOW_FILE = "release.yml"

                    sh """
                        curl -X POST https://api.github.com/repos/$MAIN_REPO/actions/workflows/$WORKFLOW_FILE/dispatches \
                            -H "Accept: application/vnd.github.v3+json" \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -d '{ "ref": "main" }'
                    """
                    echo "📦 Release workflow triggered in GitHub Actions."
                }
            }
        }
    }
}
