node {
  stage('SCM') {
    checkout scm
  }

  stage('Install Node.js') {
    sh '''
      export NVM_DIR="${WORKSPACE}/.nvm"
      mkdir -p "$NVM_DIR"
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      nvm install 18

      # Wrapper para usar node/npm
      echo '#!/bin/bash' > with-node.sh
      echo 'export NVM_DIR="${WORKSPACE}/.nvm"' >> with-node.sh
      echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
      echo 'nvm use 18 > /dev/null' >> with-node.sh
      echo 'exec "$@"' >> with-node.sh
      chmod +x with-node.sh

      echo ">>> Node y npm instalados:"
      ./with-node.sh node -v
      ./with-node.sh npm -v
    '''
  }

  stage('Install Dependencies') {
    sh './with-node.sh npm install'
  }

  stage('Run Tests with Coverage') {
    sh '''
      echo "Ejecutando tests con cobertura..."
      ./with-node.sh npm run test:coverage
    '''
  }

  stage('SonarQube Analysis') {
    def scannerHome = tool 'SonarScanner'
    withSonarQubeEnv('SonarScanner') {
      sh """
        # Configurar Node.js en el PATH para SonarQube
        export NVM_DIR="${WORKSPACE}/.nvm"
        [ -s "\$NVM_DIR/nvm.sh" ] && source "\$NVM_DIR/nvm.sh"
        nvm use 18
        
        echo "Node.js version for SonarQube:"
        node -v
        npm -v
        
        echo "SonarQube URL: \$SONAR_HOST_URL"
        echo "Current directory: \$(pwd)"
        echo "Directory contents:"
        ls -la

        echo "Source directory contents:"
        find src -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | head -20

        echo "Checking coverage files:"
        ls -la coverage/ || echo "No coverage directory found"

        echo "Coverage lcov.info preview:"
        head -10 coverage/lcov.info || echo "No lcov.info file found"

        echo "Checking for sonar-project.properties:"
        cat sonar-project.properties || echo "No sonar-project.properties found"

        # Usar la configuraci√≥n del archivo sonar-project.properties
        ${scannerHome}/bin/sonar-scanner -X
      """
    }
  }

  stage('Quality Gate') {
    timeout(time: 1, unit: 'MINUTES') {
      waitForQualityGate abortPipeline: false
    }
  }
}
