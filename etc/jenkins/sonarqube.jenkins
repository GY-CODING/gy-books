node {
  stage('SCM') {
    checkout scm
  }

  stage('Install Node.js') {
    sh '''
      export NVM_DIR="${WORKSPACE}/.nvm"
      mkdir -p "$NVM_DIR"
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      nvm install 18

      # Wrapper para usar node/npm
      echo '#!/bin/bash' > with-node.sh
      echo 'export NVM_DIR="${WORKSPACE}/.nvm"' >> with-node.sh
      echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
      echo 'nvm use 18 > /dev/null' >> with-node.sh
      echo 'exec "$@"' >> with-node.sh
      chmod +x with-node.sh

      ./with-node.sh node -v
      ./with-node.sh npm -v
    '''
  }

  stage('Install Dependencies') {
    sh './with-node.sh npm install'
  }

  stage('Run Tests with Coverage') {
    sh './with-node.sh npm run test:coverage'
  }

  stage('SonarQube Analysis') {
    sh '''#!/bin/bash
      # Configurar Node.js en el PATH para SonarQube
      export NVM_DIR="${WORKSPACE}/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
      nvm use 18

      echo "Node.js version for SonarQube:"
      node -v
      npm -v

      echo "Verificando archivos de cobertura..."
      ls -la coverage/ || echo "No coverage directory found"
      [ -f coverage/lcov.info ] && echo "LCOV file found" || echo "LCOV file NOT found"

      # Ejecutar an√°lisis de SonarQube directamente
      sonar-scanner \
        -Dsonar.projectKey=GY-Books \
        -Dsonar.sources=src \
        -Dsonar.host.url=https://sonar.gycoding.com \
        -Dsonar.login=sqp_aaa62f332046007dd83c4211e16452989c16bf67 \
        -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/node_modules/**,**/coverage/**,**/__mocks__/**,**/*.d.ts \
        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
        -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
        -Dsonar.testExecutionReportPaths=coverage/test-report.xml \
        -Dsonar.sourceEncoding=UTF-8
    '''
  }

  stage('Quality Gate') {
    timeout(time: 1, unit: 'MINUTES') {
      waitForQualityGate abortPipeline: false
    }
  }
}
