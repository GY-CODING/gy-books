node {
  stage('SCM') {
    checkout scm
  }

  stage('Install Node.js') {
    sh '''
      export NVM_DIR="${WORKSPACE}/.nvm"
      mkdir -p "$NVM_DIR"
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      nvm install 18

      # Wrapper para usar node/npm
      echo '#!/bin/bash' > with-node.sh
      echo 'export NVM_DIR="${WORKSPACE}/.nvm"' >> with-node.sh
      echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
      echo 'nvm use 18 > /dev/null' >> with-node.sh
      echo 'exec "$@"' >> with-node.sh
      chmod +x with-node.sh

      ./with-node.sh node -v
      ./with-node.sh npm -v
    '''
  }

  stage('Install Dependencies') {
    sh './with-node.sh npm install'
  }

  stage('Run Tests with Coverage') {
    sh './with-node.sh npm run test:coverage'
  }

  stage('SonarQube Analysis') {
    withSonarQubeEnv('GY-Sonar') {
      sh '''#!/bin/bash
        export NVM_DIR="${WORKSPACE}/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
        nvm use 18

        echo ">>> Verificando reportes generados:"
        ls -la coverage/ || echo "No coverage directory found"
        [ -f coverage/lcov.info ] && echo "LCOV file found" || echo "LCOV file NOT found"
        [ -f coverage/test-report.xml ] && echo "JUnit file found" || echo "JUnit file NOT found"

        sonar-scanner
      '''
    }
  }

  stage('Quality Gate') {
    timeout(time: 1, unit: 'MINUTES') {
      waitForQualityGate abortPipeline: false
    }
  }
}
