pipeline {
  agent any

  environment {
    WORKSPACE_DIR = 'gy-books-analysis'
    NVM_DIR = "${WORKSPACE}/.nvm"
    // Descomenta la línea siguiente para desactivar SonarQube
    // SKIP_SONAR = 'true'
  }

  tools {
    // SonarQube Scanner configurado en Jenkins
    'hudson.plugins.sonar.SonarRunnerInstallation' 'SonarScanner'
  }

  stages {
    stage('Prepare Workspace') {
      steps {
        script {
          if (fileExists(WORKSPACE_DIR)) {
            echo "gy-books directory already exists, cleaning..."
            dir(WORKSPACE_DIR) {
              sh '''
                rm -rf .nvm with-node.sh node_modules coverage
              '''
            }
          } else {
            echo "Creating gy-books directory..."
            sh "mkdir -p $WORKSPACE_DIR"
          }

          // Copiar código fuente al directorio de análisis
          echo "Copying source code to analysis directory..."
          sh """
            cp -r src ${WORKSPACE_DIR}/
            cp -r public ${WORKSPACE_DIR}/ || echo "No public directory found"
            cp -r .git ${WORKSPACE_DIR}/ || echo "No .git directory found"
            cp package*.json ${WORKSPACE_DIR}/
            cp tsconfig.json ${WORKSPACE_DIR}/ || echo "No tsconfig.json found"
            cp jest.config.* ${WORKSPACE_DIR}/ || echo "No jest config found"
            cp next.config.* ${WORKSPACE_DIR}/ || echo "No next config found"
            cp *.config.* ${WORKSPACE_DIR}/ || echo "No additional configs found"
            cp sonar-project.properties ${WORKSPACE_DIR}/ || echo "No sonar-project.properties found"
          """
        }
      }
    }

    stage('Install Node') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            mkdir -p "$NVM_DIR"
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 18

            # Wrapper para usar node/npm
            echo '#!/bin/bash' > with-node.sh
            echo 'export NVM_DIR="$NVM_DIR"' >> with-node.sh
            echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
            echo 'nvm use 18 > /dev/null' >> with-node.sh
            echo 'exec "$@"' >> with-node.sh
            chmod +x with-node.sh

            echo ">>> Node y npm instalados:"
            ./with-node.sh node -v
            ./with-node.sh npm -v
          '''
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            # Deshabilitar husky en CI
            export HUSKY=0
            ./with-node.sh npm install
          '''
        }
      }
    }

    stage('Run Tests with Coverage') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            echo "Ejecutando tests con cobertura..."
            ./with-node.sh npm run test:coverage || ./with-node.sh npm test -- --coverage || echo "Tests executed with basic coverage"
          '''
        }
      }
    }

    stage('SonarQube Analysis') {
      when {
        not { environment name: 'SKIP_SONAR', value: 'true' }
      }
      steps {
        dir(WORKSPACE_DIR) {
          script {
            def scannerHome = tool 'SonarScanner'
            withSonarQubeEnv('SonarScanner') {
              sh '''#!/bin/bash
                # Configurar Node.js en el PATH para SonarQube
                export NVM_DIR="${WORKSPACE}/.nvm"
                [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
                nvm use 18

                echo "Node.js version for SonarQube:"
                node -v
                npm -v

                echo "SonarQube URL: $SONAR_HOST_URL"
                echo "Current directory: $(pwd)"
                echo "Directory contents:"
                ls -la

                echo "Source directory contents:"
                find src -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | head -20

                echo "Checking coverage files:"
                ls -la coverage/ || echo "No coverage directory found"

                echo "Coverage lcov.info preview:"
                head -10 coverage/lcov.info || echo "No lcov.info file found"

                echo "Checking for sonar-project.properties:"
                cat sonar-project.properties || echo "No sonar-project.properties found"

                # Usar la configuración del archivo sonar-project.properties
              ''' + "${scannerHome}/bin/sonar-scanner -X"
            }
          }
        }
      }
    }
  }

  post {
    always {
      // Publicar reportes de test si existen
      script {
        if (fileExists("${WORKSPACE_DIR}/coverage/index.html")) {
          publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "${WORKSPACE_DIR}/coverage",
            reportFiles: 'index.html',
            reportName: 'Coverage Report'
          ])
        }
      }
    }
  }
}
