pipeline {
  agent any

  environment {
    WORKSPACE_DIR = 'WingWords'
    NVM_DIR = "${WORKSPACE}/.nvm"
  }

  tools {
    // SonarQube Scanner configurado en Jenkins
    'hudson.plugins.sonar.SonarRunnerInstallation' 'GY-Sonar'
  }

  stages {
    stage('Prepare Workspace') {
      steps {
        script {
          if (fileExists(WORKSPACE_DIR)) {
            echo "WingWords directory already exists, cleaning..."
            dir(WORKSPACE_DIR) {
              sh '''
                rm -rf .nvm with-node.sh
              '''
            }
          } else {
            echo "Creating WingWords directory..."
            sh "mkdir -p $WORKSPACE_DIR"
          }
        }
      }
    }

    stage('Install Node') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            mkdir -p "$NVM_DIR"
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 18

            # Wrapper para usar node/npm
            echo '#!/bin/bash' > with-node.sh
            echo 'export NVM_DIR="$NVM_DIR"' >> with-node.sh
            echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
            echo 'nvm use 18 > /dev/null' >> with-node.sh
            echo 'exec "$@"' >> with-node.sh
            chmod +x with-node.sh

            echo ">>> Node y npm instalados:"
            ./with-node.sh node -v
            ./with-node.sh npm -v
          '''
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        dir(WORKSPACE_DIR) {
          sh './with-node.sh npm install'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir(WORKSPACE_DIR) {
          script {
            try {
              // Intentar usar el scanner configurado en Jenkins
              def scannerHome = tool 'GY-Sonar'
              withSonarQubeEnv('GY-Sonar') {
                sh """
                  ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=wingwords \
                    -Dsonar.projectName="WingWords" \
                    -Dsonar.sources=src \
                    -Dsonar.exclusions="**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/node_modules/**,**/.next/**"
                """
              }
            } catch (Exception e) {
              echo "Error con scanner de Jenkins: ${e.getMessage()}"
              echo "Intentando con npx sonar-scanner..."

              // Fallback usando npx
              withSonarQubeEnv('GY-Sonar') {
                sh '''
                  ./with-node.sh npx sonar-scanner \
                    -Dsonar.projectKey=wingwords \
                    -Dsonar.projectName="WingWords" \
                    -Dsonar.sources=src \
                    -Dsonar.exclusions="**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/node_modules/**,**/.next/**" \
                    -Dsonar.host.url=$SONAR_HOST_URL \
                    -Dsonar.login=$SONAR_AUTH_TOKEN
                '''
              }
            }
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        script {
          try {
            timeout(time: 5, unit: 'MINUTES') {
              waitForQualityGate abortPipeline: false
            }
          } catch (Exception e) {
            echo "Quality Gate failed or timed out: ${e.getMessage()}"
            currentBuild.result = 'UNSTABLE'
          }
        }
      }
    }

    stage('Run Tests') {
      steps {
        dir(WORKSPACE_DIR) {
          sh './with-node.sh npm run test'
        }
      }
    }
  }
}
