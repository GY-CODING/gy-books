pipeline {
  agent any

  environment {
    WORKSPACE_DIR = 'gy-books-analysis'
    NVM_DIR = "${WORKSPACE}/.nvm"
    // Descomenta la línea siguiente para desactivar SonarQube
    // SKIP_SONAR = 'true'
  }

  tools {
    // SonarQube Scanner configurado en Jenkins
    'hudson.plugins.sonar.SonarRunnerInstallation' 'SonarScanner'
  }

  stages {
    stage('Prepare Workspace') {
      steps {
        script {
          if (fileExists(WORKSPACE_DIR)) {
            echo "gy-books directory already exists, cleaning..."
            dir(WORKSPACE_DIR) {
              sh '''
                rm -rf .nvm with-node.sh node_modules coverage
              '''
            }
          } else {
            echo "Creating gy-books directory..."
            sh "mkdir -p $WORKSPACE_DIR"
          }
        }
      }
    }

    stage('Install Node') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            mkdir -p "$NVM_DIR"
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 18

            # Wrapper para usar node/npm
            echo '#!/bin/bash' > with-node.sh
            echo 'export NVM_DIR="$NVM_DIR"' >> with-node.sh
            echo '[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"' >> with-node.sh
            echo 'nvm use 18 > /dev/null' >> with-node.sh
            echo 'exec "$@"' >> with-node.sh
            chmod +x with-node.sh

            echo ">>> Node y npm instalados:"
            ./with-node.sh node -v
            ./with-node.sh npm -v
          '''
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        dir(WORKSPACE_DIR) {
          sh './with-node.sh npm install'
        }
      }
    }

    stage('Run Tests with Coverage') {
      steps {
        dir(WORKSPACE_DIR) {
          sh '''
            echo "Ejecutando tests con cobertura..."
            ./with-node.sh npm run test:coverage || ./with-node.sh npm test -- --coverage || echo "Tests executed with basic coverage"
          '''
        }
      }
    }

    stage('SonarQube Analysis') {
      when {
        not { environment name: 'SKIP_SONAR', value: 'true' }
      }
      steps {
        dir(WORKSPACE_DIR) {
          script {
            try {
              echo "Verificando conexión a SonarQube..."
              def scannerHome = tool 'SonarScanner'
              withSonarQubeEnv('SonarScanner') {
                sh """
                  echo "SonarQube URL: \$SONAR_HOST_URL"
                  echo "Ejecutando análisis con cobertura..."
                  ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=gy-books \
                    -Dsonar.projectName="GY Books" \
                    -Dsonar.sources=src \
                    -Dsonar.tests=src \
                    -Dsonar.test.inclusions="**/*.test.js,**/*.test.ts,**/*.test.tsx,**/*.spec.js,**/*.spec.ts,**/*.spec.tsx" \
                    -Dsonar.exclusions="**/node_modules/**,**/.next/**,**/dist/**,**/build/**,**/*.test.js,**/*.test.ts,**/*.test.tsx,**/*.spec.js,**/*.spec.ts,**/*.spec.tsx" \
                    -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                    -Dsonar.testExecutionReportPaths=coverage/test-results.xml \
                    -Dsonar.sourceEncoding=UTF-8
                """
              }
            } catch (Exception e) {
              echo "⚠️ SonarQube Analysis falló: ${e.getMessage()}"
              echo "Continuando sin análisis de SonarQube..."
              currentBuild.result = 'UNSTABLE'
            }
          }
        }
      }
    }

    stage('Quality Gate') {
      when {
        not { environment name: 'SKIP_SONAR', value: 'true' }
      }
      steps {
        timeout(time: 1, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: false
        }
      }
    }
  }

  post {
    always {
      // Publicar reportes de test si existen
      script {
        if (fileExists("${WORKSPACE_DIR}/coverage/clover.xml")) {
          publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "${WORKSPACE_DIR}/coverage",
            reportFiles: 'index.html',
            reportName: 'Coverage Report'
          ])
        }
      }
    }
  }
